# Шаблон промпта для генерации скрипта оптимизации
OPTIMIZATION_PROMPT_TEMPLATE = """Ты эксперт по оптимизации Windows. Тебе предоставлен скриншот системной информации. Твоя задача - создать скрипты для оптимизации этой системы.

Обязательно следуй этим требованиям к скриптам:

1. PowerShell скрипт (.ps1):
   - Всегда начинай с установки кодировки UTF-8: `$OutputEncoding = [System.Text.Encoding]::UTF8`
   - Проверяй права администратора в самом начале скрипта
   - Все блоки try ДОЛЖНЫ иметь соответствующие блоки catch
   - Используй правильное форматирование переменных: внутри строк с двоеточием используй `${variable}` вместо `$variable`
   - Проверяй существование файлов с помощью Test-Path перед их использованием
   - Добавляй ключ -Force для команд Remove-Item
   - Обеспечь балансировку всех фигурных скобок
   - Для вывода сообщений об ошибках используй формат: `"Сообщение: ${variable}"`

2. Batch файл (.bat):
   - Обязательно начинай с `@echo off` и `chcp 65001 >nul`
   - Проверяй права администратора
   - Добавляй корректные параметры при вызове PowerShell: `-ExecutionPolicy Bypass -NoProfile -File`
   - Используй перенаправление ошибок `>nul 2>&1` для команд

3. ReadMe файл (README.md):
   - Подробная документация по использованию скриптов
   - Описание выполняемых оптимизаций
   - Требования и предупреждения

Предоставь три файла:
1. WindowsOptimizer.ps1 - скрипт оптимизации PowerShell, который анализирует систему и оптимизирует её
2. Start-Optimizer.bat - bat-файл для запуска PowerShell скрипта с нужными параметрами
3. README.md - инструкция по использованию скриптов

Используй шаблоны и структуры, указанные ниже:

Для PowerShell скрипта:
```powershell
# Encoding: UTF-8
$OutputEncoding = [System.Text.Encoding]::UTF8

# Проверка прав администратора
function Test-Administrator {
    $user = [Security.Principal.WindowsIdentity]::GetCurrent()
    $principal = New-Object Security.Principal.WindowsPrincipal($user)
    return $principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

if (-not (Test-Administrator)) {
    Write-Warning "Этот скрипт требует запуска от имени администратора."
    Write-Warning "Пожалуйста, запустите скрипт от имени администратора."
    pause
    exit
}

# Настройка логирования
$LogPath = "$env:TEMP\WindowsOptimizer_Log.txt"
Start-Transcript -Path $LogPath -Append -Force
Write-Host "Логирование настроено. Лог будет сохранен в файл: $LogPath" -ForegroundColor Green

# Функция для создания резервных копий настроек
function Backup-Settings {
    param (
        [string]$SettingName,
        [string]$Data
    )
    
    try {
        # Создаем директорию для резервных копий, если ее нет
        $BackupDir = "$env:USERPROFILE\WindowsOptimizer_Backups"
        if (-not (Test-Path -Path $BackupDir)) {
            New-Item -Path $BackupDir -ItemType Directory -Force | Out-Null
        }
        
        # Формируем имя файла резервной копии
        $Timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
        $BackupFile = "$BackupDir\${SettingName}_$Timestamp.bak"
        
        # Сохраняем данные в файл
        $Data | Out-File -FilePath $BackupFile -Encoding UTF8 -Force
        
        Write-Host "Создана резервная копия $SettingName в файле $BackupFile" -ForegroundColor Green
        return $BackupFile
    }
    catch {
        Write-Warning "Не удалось создать резервную копию ${SettingName}: ${_}"
        return $null
    }
}

# Функция отображения прогресса
function Show-Progress {
    param (
        [string]$Activity,
        [int]$PercentComplete
    )
    
    Write-Progress -Activity $Activity -PercentComplete $PercentComplete
    Write-Host "[$($Activity)]: $PercentComplete%" -ForegroundColor Cyan
}

# Дальше идет твой код оптимизации...
```

Для BAT файла:
```batch
@echo off
chcp 65001 >nul
title Запуск оптимизации Windows

:: Проверка прав администратора
net session >nul 2>&1
if %errorlevel% neq 0 (
    echo Скрипт требует запуска от имени администратора.
    echo Пожалуйста, запустите этот файл от имени администратора.
    pause
    exit /b 1
)

echo Запуск скрипта оптимизации Windows...
echo ==========================================

:: Запуск PowerShell скрипта с обходом политики выполнения и правильной кодировкой
powershell -ExecutionPolicy Bypass -NoProfile -File "WindowsOptimizer.ps1"

echo ==========================================
echo Скрипт оптимизации выполнен.
pause
```

ВАЖНЫЕ ИНСТРУКЦИИ:
- Обязательно проверяйте права администратора в начале скрипта
- Добавляйте обработку ошибок для каждой важной операции
- Используйте формат ${переменная} в строках с двоеточием
- Для PowerShell скриптов используйте кодировку UTF-8
- Убедитесь, что все блоки try имеют соответствующие блоки catch
- Всегда балансируйте фигурные скобки во всех скриптах

Анализируй предоставленный скриншот и создай оптимизированные скрипты для данной системы.
"""

# Шаблон промпта для исправления ошибок в скрипте
ERROR_FIX_PROMPT_TEMPLATE = """Ты эксперт по PowerShell и Batch скриптам. Перед тобой скриншот с ошибками выполнения скрипта оптимизации Windows. Твоя задача - проанализировать ошибки и исправить код скрипта.

Вот основные типы ошибок, которые могут встречаться:

1. Синтаксические ошибки:
   - Несбалансированные скобки
   - Неверное использование переменных
   - Ошибки в конструкциях try-catch
   - Неэкранированные специальные символы

2. Проблемы с доступом:
   - Отсутствие проверки прав администратора
   - Попытка доступа к несуществующим файлам или службам
   - Отсутствие параметра -Force для Remove-Item

3. Проблемы кодировки:
   - Отсутствие установки правильной кодировки
   - Неверное отображение кириллических символов

Важные правила при исправлении:

1. Для PowerShell:
   - Всегда добавляй в начало скрипта: `$OutputEncoding = [System.Text.Encoding]::UTF8`
   - Все блоки try ДОЛЖНЫ иметь соответствующие блоки catch
   - Переменные в строках с двоеточием используй в формате `${variable}` вместо `$variable`
   - Используй проверки Test-Path перед операциями с файлами
   - Балансируй все фигурные скобки

2. Для Batch:
   - Начинай с `@echo off` и `chcp 65001 >nul`
   - Добавляй корректные параметры при вызове PowerShell

Предоставь исправленные версии файлов с учетом обнаруженных на скриншоте проблем.

ОБЯЗАТЕЛЬНО ПРОВЕРЬТЕ:
- Проверку прав администратора
- Наличие и корректность блоков обработки ошибок
- Кодировку UTF-8 для PowerShell скриптов
- Балансировку всех скобок в скрипте
- Правильный формат переменных в строках с двоеточием (${variable})
"""

def validate_and_fix_scripts(files):
    """
    Валидирует и исправляет скрипты
    
    Args:
        files: словарь с файлами (имя файла -> содержимое)
    
    Returns:
        tuple: (исправленные файлы, результаты валидации, кол-во исправленных ошибок)
    """
    validator = ScriptValidator()
    
    # Валидируем скрипты
    validation_results = validator.validate_scripts(files)
    
    # Подсчитываем общее количество ошибок
    total_errors = sum(len(errors) for errors in validation_results.values())
    logger.info(f"Найдено {total_errors} проблем в скриптах")
    
    # Исправляем распространенные проблемы
    fixed_files = validator.repair_common_issues(files)
    
    # Валидируем исправленные скрипты
    fixed_validation_results = validator.validate_scripts(fixed_files)
    
    # Подсчитываем количество исправленных ошибок
    fixed_errors = sum(len(errors) for errors in fixed_validation_results.values())
    errors_corrected = total_errors - fixed_errors
    
    # Улучшаем скрипты, добавляя полезные функции
    enhanced_files = validator.enhance_scripts(fixed_files)
    
    logger.info(f"Исправлено {errors_corrected} проблем, осталось {fixed_errors} проблем")
    
    return enhanced_files, fixed_validation_results, errors_corrected

