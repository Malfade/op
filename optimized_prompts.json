{
    "OPTIMIZATION_PROMPT_TEMPLATE": "\nВАЖНО: Создаваемые скрипты должны быть абсолютно надежными и работать БЕЗ ОШИБОК на любой системе Windows 10/11.\n\nНа основе предоставленного скриншота с информацией о компьютере, создай универсальный скрипт оптимизации для Windows, который будет работать на любом устройстве.\n\nСкрипт должен включать:\n1. PowerShell скрипт (WindowsOptimizer.ps1) с универсальными функциями:\n   - Очистка временных файлов и кэша системы\n   - Оптимизация визуальных эффектов для производительности\n   - Настройка плана электропитания для баланса производительности и энергосбережения\n   - Управление программами автозагрузки\n   - Оптимизация служб Windows с ОБЯЗАТЕЛЬНОЙ проверкой их наличия перед изменением:\n     * Используй Get-Service -Name \"ИмяСлужбы\" -ErrorAction SilentlyContinue для проверки\n     * Выполняй Set-Service только если служба существует\n     * Не используй жестко заданный список служб - разные версии Windows имеют разные службы\n     * Добавь обработку ошибок try/catch для всех операций со службами\n   - Очистка кэша и оптимизация браузеров (Chrome, Firefox, Edge, Яндекс Браузер)\n   - Детальная оптимизация Telegram с очисткой кэша:\n     * Очистка кэша медиафайлов ($env:APPDATA\\Telegram Desktop\\tdata\\user_data\\media_cache\\*)\n     * Очистка временных файлов ($env:APPDATA\\Telegram Desktop\\tdata\\user_data\\temp\\*)\n     * Добавь рекомендации по настройкам Telegram для снижения использования ресурсов\n   - Возможность отката всех изменений к исходному состоянию\n\n2. BAT файл запуска (Start-Optimizer.bat) для корректного запуска с правами администратора:\n   - Должен включать проверку прав администратора\n   - ОБЯЗАТЕЛЬНО установку кодировки (chcp 65001) для корректного отображения русских символов в консоли\n   - Создание временного PS1 файла с правильной кодировкой UTF-8\n   - Запуск PowerShell с обходом политики выполнения и параметром -Encoding UTF8\n   - Добавь проверку занятости файлов перед их удалением, чтобы избежать ошибок \"Процесс не может получить доступ к файлу, так как этот файл занят другим процессом\"\n   - BAT файл ДОЛЖЕН корректно отображать русский текст в консоли cmd.exe\n\n3. README.md с инструкциями\n\nВАЖНО: Избегай распространенных ошибок:\n- Отсутствие проверки прав администратора: всегда проверяй через net session >nul 2>&1 в batch и [Security.Principal.WindowsBuiltInRole]::Administrator в PowerShell\n- Неправильная кодировка: всегда используй chcp 65001 для CMD и -Encoding UTF8 для PowerShell\n- Отсутствие проверки перед удалением файлов: всегда используй if (Test-Path $path) перед Remove-Item\n- Несбалансированные скобки: убедись, что каждая { имеет соответствующую }, и каждая ( имеет соответствующую )\n- Отсутствие обработки ошибок для операций со службами: всегда проверяй Get-Service перед Set-Service\n- Отсутствие try-catch: оборачивай опасные операции в try-catch блоки\n- Занятые файлы: всегда добавляй -Force -ErrorAction SilentlyContinue при удалении файлов\n- Критические службы: никогда не отключай критические службы Windows как Windows Update, Windows Defender и т.д.\n\nСТРУКТУРА СКРИПТА POWERSHELL:\n- Скрипт должен иметь модульную структуру с отдельными функциями для каждой оптимизации\n- В начале скрипта должна быть проверка прав администратора\n- В начале должны создаваться точки восстановления и бэкапы настроек\n- Каждая функция должна включать try-catch блоки и логирование операций\n- Все операции с файлами должны включать Test-Path и использовать -Force -ErrorAction SilentlyContinue\n- Все операции со службами должны включать Get-Service -ErrorAction SilentlyContinue\n- Функция меню должна предоставлять выбор отдельных оптимизаций\n- Функция отката должна восстанавливать все настройки\n- Каждая функция должна сообщать о своем выполнении и результатах\n\nПРИМЕР НАДЕЖНОГО КОДА:\n```powershell\n# Оптимизация служб (пример правильного кода)\nfunction Optimize-Services {\n    param([bool]$Revert = $false)\n    \n    Write-Host \"Оптимизация служб Windows...\" -ForegroundColor Cyan\n    \n    try {\n        # Список служб для оптимизации (пример безопасных служб)\n        $servicesToDisable = @(\"DiagTrack\", \"dmwappushservice\", \"SysMain\")\n        \n        foreach ($service in $servicesToDisable) {\n            # Проверка существования службы\n            $svc = Get-Service -Name $service -ErrorAction SilentlyContinue\n            \n            if ($svc) {\n                # Сохраняем текущее состояние для отката\n                $currentState = $svc.StartType\n                $backupFile = \"$env:TEMP\\service_$service.bak\"\n                $currentState | Out-File -FilePath $backupFile -Force\n                \n                if ($Revert) {\n                    # Восстановление настроек\n                    if (Test-Path $backupFile) {\n                        $originalState = Get-Content $backupFile\n                        Write-Host \"Восстановление службы $service в состояние $originalState...\"\n                        try {\n                            Set-Service -Name $service -StartupType $originalState -ErrorAction SilentlyContinue\n                            Write-Host \"Служба $service восстановлена.\" -ForegroundColor Green\n                        }\n                        catch {\n                            Write-Warning \"Не удалось восстановить службу $service: $_\"\n                        }\n                    }\n                }\n                else {\n                    # Оптимизация\n                    try {\n                        Set-Service -Name $service -StartupType Disabled -ErrorAction SilentlyContinue\n                        Write-Host \"Служба $service отключена.\" -ForegroundColor Green\n                    }\n                    catch {\n                        Write-Warning \"Не удалось отключить службу $service: $_\"\n                    }\n                }\n            }\n            else {\n                Write-Host \"Служба $service не найдена на данном компьютере.\" -ForegroundColor Yellow\n            }\n        }\n    }\n    catch {\n        Write-Warning \"Произошла ошибка при оптимизации служб: $_\"\n    }\n}\n```\n\n```batch\n@echo off\nchcp 65001 >nul\ntitle Запуск оптимизации Windows\n\nREM Проверка прав администратора\nnet session >nul 2>&1\nif %errorLevel% neq 0 (\n    echo Для запуска необходимы права администратора.\n    echo Пожалуйста, запустите скрипт от имени администратора.\n    pause\n    exit\n)\n\nREM Проверка наличия файла скрипта\nif not exist \"WindowsOptimizer.ps1\" (\n    echo Не найден файл WindowsOptimizer.ps1\n    echo Убедитесь, что файл находится в той же папке, что и этот .bat файл.\n    pause\n    exit\n)\n\nREM Запуск PowerShell скрипта с обходом политики выполнения и правильной кодировкой\npowershell -ExecutionPolicy Bypass -NoProfile -File \"WindowsOptimizer.ps1\" -Encoding UTF8\n```\n\nСкрипт должен иметь русскоязычный интерфейс, корректную обработку кодировки и проверки перед выполнением оптимизации.\n\nВ PowerShell скрипте должно быть интерактивное меню как в примере:\n- Отображение информации о системе\n- Возможность выбора отдельных оптимизаций или всех сразу\n- Возможность восстановления предыдущих настроек\n- Резервное копирование перед каждой оптимизацией\n- Журналирование всех действий\n\nПредоставь три файла:\n1. WindowsOptimizer.ps1\n2. Start-Optimizer.bat\n3. README.md\n",
    "ERROR_FIX_PROMPT_TEMPLATE": "\nВАЖНОЕ ЗАДАНИЕ: Исправь ошибки в скрипте оптимизации Windows на основе предоставленного скриншота ошибки.\n\nНа скриншоте показаны ошибки, возникшие при выполнении скрипта оптимизации Windows. Твоя задача - проанализировать эти ошибки и исправить скрипт так, чтобы они не возникали.\n\nНаиболее распространенные ошибки, которые могут быть на скриншоте:\n1. \"Процесс не может получить доступ к файлу, так как этот файл занят другим процессом\" - добавь обработку занятых файлов\n2. \"Служба [имя] не найдена на компьютере\" - добавь проверки существования служб перед их изменением\n3. Ошибки синтаксиса или выполнения PowerShell или cmd скриптов\n4. Проблемы с кодировкой или правами доступа\n5. Нечитаемый текст в консоли из-за неправильной кодировки - исправь на UTF-8 (chcp 65001)\n\nВнимательно проанализируй ошибки на скриншоте и создай исправленные версии файлов:\n1. WindowsOptimizer.ps1 - исправь ошибки в PowerShell скрипте\n2. Start-Optimizer.bat - исправь ошибки в BAT файле, особенно проблемы с кодировкой (используй chcp 65001)\n\nОБЯЗАТЕЛЬНЫЕ ПРИНЦИПЫ ДЛЯ ИСПРАВЛЕНИЯ:\n- ВСЕГДА добавляй try/catch блоки вокруг всех операций со службами и файлами\n- ВСЕГДА проверяй существование служб через Get-Service перед их изменением\n- ВСЕГДА проверяй существование файлов через Test-Path перед их удалением\n- ВСЕГДА используй параметры -Force -ErrorAction SilentlyContinue для работы с файлами\n- НИКОГДА не используй жесткий список служб - проверяй их наличие перед изменением\n- ВСЕГДА добавляй коды выхода и журналирование для всех операций\n- ВСЕГДА устанавливай правильную кодировку UTF-8 (chcp 65001) в bat-файле\n- ВСЕГДА проверяй права администратора\n\nПРИМЕР НАДЕЖНОГО КОДА ДЛЯ РАБОТЫ С ФАЙЛАМИ:\n```powershell\nfunction Clear-TempFiles {\n    try {\n        $tempFolders = @(\n            \"$env:TEMP\",\n            \"$env:windir\\Temp\"\n        )\n        \n        foreach ($folder in $tempFolders) {\n            if (Test-Path $folder) {\n                Write-Host \"Очистка временных файлов в $folder...\"\n                \n                # Перечисляем файлы и папки вместо Remove-Item с маской *\n                Get-ChildItem -Path $folder -Force -ErrorAction SilentlyContinue | ForEach-Object {\n                    try {\n                        if (Test-Path $_.FullName) {\n                            Remove-Item $_.FullName -Recurse -Force -ErrorAction SilentlyContinue\n                            Write-Verbose \"Удален: $($_.FullName)\"\n                        }\n                    }\n                    catch {\n                        Write-Warning \"Не удалось удалить $($_.FullName): $_\"\n                    }\n                }\n            }\n        }\n        Write-Host \"Очистка временных файлов завершена.\" -ForegroundColor Green\n    }\n    catch {\n        Write-Warning \"Ошибка при очистке временных файлов: $_\"\n    }\n}\n```\n\nПРИМЕР НАДЕЖНОГО КОДА ДЛЯ РАБОТЫ СО СЛУЖБАМИ:\n```powershell\nfunction Disable-Service {\n    param (\n        [string]$ServiceName\n    )\n    \n    try {\n        # Проверка существования службы\n        $service = Get-Service -Name $ServiceName -ErrorAction SilentlyContinue\n        \n        if ($service) {\n            # Сохранение текущего состояния для возможности отката\n            $currentState = $service.StartType\n            $backupFile = \"$env:TEMP\\service_$ServiceName.bak\"\n            $currentState | Out-File -FilePath $backupFile -Force\n            \n            # Отключение службы\n            Set-Service -Name $ServiceName -StartupType Disabled -ErrorAction SilentlyContinue\n            Write-Host \"Служба $ServiceName отключена.\" -ForegroundColor Green\n            return $true\n        }\n        else {\n            Write-Host \"Служба $ServiceName не найдена на данном компьютере.\" -ForegroundColor Yellow\n            return $false\n        }\n    }\n    catch {\n        Write-Warning \"Ошибка при работе со службой $ServiceName: $_\"\n        return $false\n    }\n}\n```\n\nПРИМЕР НАДЕЖНОГО BAT ФАЙЛА:\n```batch\n@echo off\nchcp 65001 >nul\ntitle Запуск оптимизации Windows\n\nREM Проверка прав администратора\nnet session >nul 2>&1\nif %errorLevel% neq 0 (\n    echo Для запуска необходимы права администратора.\n    echo Пожалуйста, запустите скрипт от имени администратора.\n    pause\n    exit /b 1\n)\n\nREM Проверка наличия файла скрипта\nif not exist \"WindowsOptimizer.ps1\" (\n    echo Не найден файл WindowsOptimizer.ps1\n    echo Убедитесь, что файл находится в той же папке, что и этот .bat файл.\n    pause\n    exit /b 1\n)\n\nREM Создание временной копии скрипта с правильной кодировкой\npowershell -NoProfile -Command \"$content = Get-Content -Path 'WindowsOptimizer.ps1' -Raw; [System.IO.File]::WriteAllText('WindowsOptimizer_temp.ps1', $content, [System.Text.Encoding]::UTF8)\" >nul 2>&1\n\nREM Запуск PowerShell скрипта с обходом политики выполнения\necho Запуск скрипта оптимизации Windows...\npowershell -ExecutionPolicy Bypass -NoProfile -File \"WindowsOptimizer_temp.ps1\" -Encoding UTF8\n\nREM Удаление временной копии скрипта\nif exist \"WindowsOptimizer_temp.ps1\" del \"WindowsOptimizer_temp.ps1\" >nul 2>&1\n\npause\nexit /b 0\n```\n\nДля каждой ошибки:\n- Добавь корректную обработку исключений try/catch\n- Для проблем с доступом к файлам добавь проверки и механизмы корректной обработки занятых файлов\n- Для отсутствующих служб добавь проверки их наличия перед изменением\n- Для проблем с кодировкой добавь корректную установку UTF-8 в BAT-файле и использование параметра -Encoding UTF8 при вызове PowerShell\n\nВАЖНО: исправленные скрипты должны работать на ВСЕХ версиях Windows 10/11 без ошибок и продолжать выполнение даже если возникает проблема с отдельной частью скрипта. Обязательно исправь проблемы с отображением кириллицы в консоли.\n\nПредоставь исправленные версии файлов:\n1. WindowsOptimizer.ps1\n2. Start-Optimizer.bat\n",
    "version": 1,
    "error_examples": {},
    "last_updated": "2025-05-12T19:58:51.727135"
}