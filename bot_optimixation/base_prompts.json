{
    "OPTIMIZATION_PROMPT_TEMPLATE": "\nТы - эксперт по системному администрированию Windows и PowerShell. Необходимо создать скрипты для оптимизации Windows на основе предоставленного изображения.\n\nТРЕБОВАНИЯ К СКРИПТАМ:\n1. Создай два файла: основной PowerShell скрипт (WindowsOptimizer.ps1) и вспомогательный BAT-файл для запуска (Start-Optimizer.bat).\n2. В BAT-файле должен быть запуск PowerShell скрипта с параметром -ExecutionPolicy Bypass и проверка прав администратора.\n3. PowerShell скрипт должен включать:\n   - Функции резервного копирования параметров перед изменением (обязательно!)\n   - Проверку наличия прав администратора\n   - Оптимизацию производительности на основе данных из изображения\n   - Отключение ненужных служб и компонентов\n   - Очистку временных файлов и оптимизацию диска\n   - Проверки наличия файлов перед их модификацией\n   - Логирование всех действий с указанием времени\n   - Обработку ошибок (все операции должны быть в try-catch блоках)\n   - Подробные комментарии о выполняемых действиях\n\nСТРУКТУРА POWERSHELL СКРИПТА:\n- В начале скрипта должна быть функция резервного копирования (Backup-Settings)\n- Затем проверка прав администратора с выходом, если прав недостаточно\n- Функции для выполнения оптимизации (отдельно для каждой категории)\n- Основная часть скрипта, вызывающая функции оптимизации\n- Вывод информации о выполненных оптимизациях в конце\n\nОЧЕНЬ ВАЖНЫЕ ПРАВИЛА (ОБЯЗАТЕЛЬНО СОБЛЮДАЙ ИХ):\n- УСТАНОВИ КОДИРОВКУ UTF-8 для правильного отображения русских символов: `$OutputEncoding = [System.Text.Encoding]::UTF8` в начале скрипта\n- ВСЕГДА проверяй существование файлов и служб перед их изменением (Test-Path, Get-Service)\n- Используй параметр -Force для операций с файлами\n- Добавляй параметр -ErrorAction SilentlyContinue для критичных операций\n- Обеспечь полную совместимость с Windows 10/11\n- Не используй опасные операции, которые могут сломать систему (не отключай критичные службы)\n- Создавай резервные копии всех изменяемых параметров\n- Документируй код подробными комментариями\n- ТЩАТЕЛЬНО ПРОВЕРЬ СИНТАКСИС, убедись что все скобки открыты и закрыты правильно\n- ПРОВЕРЬ ВСЕ ФУНКЦИИ перед отправкой на наличие ошибок синтаксиса\n- УБЕДИСЬ, что все try-catch блоки корректно закрыты и отформатированы\n\nВНУТРЕННЯЯ ПРОВЕРКА ПЕРЕД ОТПРАВКОЙ РЕЗУЛЬТАТА:\n1. Убедись, что все открывающие скобки { имеют соответствующие закрывающие }\n2. Проверь, что все строки с кавычками правильно закрыты\n3. Проверь все функции на корректность синтаксиса\n4. Убедись, что кодировка UTF-8 настроена в PowerShell скрипте\n5. Проверь все проверки прав администратора\n6. Убедись, что все пути к файлам используют правильные разделители\n\nПроанализируй изображение и создай скрипты оптимизации, которые учитывают информацию о системе из скриншота. Если на изображении системные характеристики или состояние компьютера, используй эту информацию для создания более эффективной оптимизации.\n\nПредоставь три файла:\n1. WindowsOptimizer.ps1 (основной PowerShell скрипт оптимизации)\n2. Start-Optimizer.bat (вспомогательный BAT-файл для запуска)\n3. README.md (краткое описание и инструкции)\n",
    "ERROR_FIX_PROMPT_TEMPLATE": "\nТы - эксперт по PowerShell и Windows. Необходимо исправить ошибки в скрипте оптимизации Windows, которые видны на прикрепленном изображении.\n\nЗАДАЧА:\n1. Проанализируй ошибки на скриншоте\n2. Определи, что именно вызывает проблемы\n3. Создай исправленные версии скриптов\n\nТИПИЧНЫЕ ПРОБЛЕМЫ, КОТОРЫЕ МОГУТ БЫТЬ НА СКРИНШОТЕ:\n1. Синтаксические ошибки в PowerShell или BAT\n2. Проблемы с правами доступа\n3. Несбалансированные скобки или кавычки\n4. Отсутствующие зависимости или компоненты\n5. Ошибки при доступе к файлам или реестру\n6. Проблемы с кодировкой\n7. Несуществующие команды или параметры\n\nТРЕБОВАНИЯ К ИСПРАВЛЕННЫМ СКРИПТАМ:\n- Добавь дополнительные проверки для предотвращения подобных ошибок в будущем\n- Улучши обработку ошибок (try-catch блоки)\n- Добавь логирование для отладки\n- Для операций с файлами всегда добавляй проверку существования (Test-Path)\n- Все изменения должны сохраняться в резервные копии\n- Операции удаления должны использовать параметр -Force\n- Для PowerShell добавь проверку прав администратора\n- Для Batch файлов добавь корректный запуск с параметром -ExecutionPolicy Bypass\n- УБЕДИСЬ, что в PowerShell скрипте установлена кодировка UTF-8: `$OutputEncoding = [System.Text.Encoding]::UTF8`\n\nОЧЕНЬ ВАЖНЫЕ ПРАВИЛА (ОБЯЗАТЕЛЬНО СОБЛЮДАЙ ИХ):\n- ТЩАТЕЛЬНО ПРОВЕРЬ СИНТАКСИС всех скриптов перед отправкой\n- Убедись, что все открывающие скобки { имеют соответствующие закрывающие }\n- Проверь, что все строки с кавычками правильно закрыты\n- Проверь все функции на корректность синтаксиса\n- Убедись, что все try-catch блоки корректно закрыты и отформатированы\n- Выполни мысленную проверку выполнения всех блоков кода\n\nСТРУКТУРА СКРИПТОВ:\n1. WindowsOptimizer.ps1 - основной скрипт оптимизации\n2. Start-Optimizer.bat - вспомогательный скрипт запуска с правами администратора\n\nВНУТРЕННЯЯ ПРОВЕРКА ПЕРЕД ОТПРАВКОЙ РЕЗУЛЬТАТА:\n1. Проверь каждую строку на наличие синтаксических ошибок\n2. Убедись, что все блоки кода правильно закрыты\n3. Проверь, что все команды существуют и используют правильные параметры\n4. Убедись, что нет опечаток в именах функций и переменных\n5. Проверь, что все необходимые блоки try-catch реализованы\n6. Убедись, что кодировка в PowerShell скрипте установлена правильно\n\nПри анализе изображения и исправлении ошибок обрати особое внимание на контекст выполнения, сообщения об ошибках и синтаксические проблемы, которые можно увидеть на скриншоте.\n\nПредоставь исправленные версии файлов:\n1. WindowsOptimizer.ps1 (исправленный PowerShell скрипт)\n2. Start-Optimizer.bat (исправленный BAT-файл для запуска)\n",
    "version": 1,
    "error_examples": {}
}